// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/client_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/client_port.go -destination=internal/core/port/mock/client_port_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/OzkrOssa/rp-admin/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockClientRepository is a mock of ClientRepository interface.
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository.
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance.
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockClientRepository) CreateClient(ctx context.Context, client *domain.Client) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, client)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockClientRepositoryMockRecorder) CreateClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockClientRepository)(nil).CreateClient), ctx, client)
}

// DeleteClient mocks base method.
func (m *MockClientRepository) DeleteClient(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockClientRepositoryMockRecorder) DeleteClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockClientRepository)(nil).DeleteClient), ctx, id)
}

// GetClientByDocument mocks base method.
func (m *MockClientRepository) GetClientByDocument(ctx context.Context, document string) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByDocument", ctx, document)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByDocument indicates an expected call of GetClientByDocument.
func (mr *MockClientRepositoryMockRecorder) GetClientByDocument(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByDocument", reflect.TypeOf((*MockClientRepository)(nil).GetClientByDocument), ctx, document)
}

// GetClientByID mocks base method.
func (m *MockClientRepository) GetClientByID(ctx context.Context, id uint64) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByID", ctx, id)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByID indicates an expected call of GetClientByID.
func (mr *MockClientRepositoryMockRecorder) GetClientByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByID", reflect.TypeOf((*MockClientRepository)(nil).GetClientByID), ctx, id)
}

// ListClients mocks base method.
func (m *MockClientRepository) ListClients(ctx context.Context, skip, limit uint64) ([]domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients", ctx, skip, limit)
	ret0, _ := ret[0].([]domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockClientRepositoryMockRecorder) ListClients(ctx, skip, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockClientRepository)(nil).ListClients), ctx, skip, limit)
}

// UpdateClient mocks base method.
func (m *MockClientRepository) UpdateClient(ctx context.Context, client *domain.Client) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, client)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockClientRepositoryMockRecorder) UpdateClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockClientRepository)(nil).UpdateClient), ctx, client)
}

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// DeleteClient mocks base method.
func (m *MockClientService) DeleteClient(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockClientServiceMockRecorder) DeleteClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockClientService)(nil).DeleteClient), ctx, id)
}

// GetClientDocument mocks base method.
func (m *MockClientService) GetClientDocument(ctx context.Context, document string) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientDocument", ctx, document)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientDocument indicates an expected call of GetClientDocument.
func (mr *MockClientServiceMockRecorder) GetClientDocument(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientDocument", reflect.TypeOf((*MockClientService)(nil).GetClientDocument), ctx, document)
}

// GetClientID mocks base method.
func (m *MockClientService) GetClientID(ctx context.Context, id uint64) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientID", ctx, id)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientID indicates an expected call of GetClientID.
func (mr *MockClientServiceMockRecorder) GetClientID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientID", reflect.TypeOf((*MockClientService)(nil).GetClientID), ctx, id)
}

// ListClients mocks base method.
func (m *MockClientService) ListClients(ctx context.Context, skip, limit uint64) ([]domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients", ctx, skip, limit)
	ret0, _ := ret[0].([]domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockClientServiceMockRecorder) ListClients(ctx, skip, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockClientService)(nil).ListClients), ctx, skip, limit)
}

// Register mocks base method.
func (m *MockClientService) Register(ctx context.Context, client *domain.Client) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, client)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockClientServiceMockRecorder) Register(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClientService)(nil).Register), ctx, client)
}

// UpdateClient mocks base method.
func (m *MockClientService) UpdateClient(ctx context.Context, client *domain.Client) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, client)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockClientServiceMockRecorder) UpdateClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockClientService)(nil).UpdateClient), ctx, client)
}
